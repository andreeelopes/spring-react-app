/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pt.unl.fct.ecma.controllers;


import io.swagger.annotations.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import pt.unl.fct.ecma.models.*;


import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-25T09:46:01.754Z")

@Api(value = "proposals", description = "the proposals API")
public interface ProposalsApi {

    @ApiOperation(value = "Add a new Bid to the proposal", nickname = "addBidToProposal", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new bid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/bids",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addBidToProposal(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Bid object to add on the proposal" ,required=true )  @Valid @RequestBody Bid bid);


    @ApiOperation(value = "Add a new comment to the proposal", nickname = "addComment", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new comment"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/comments/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addComment(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Comment object to add to the proposal" ,required=true )  @Valid @RequestBody Comment comment);


    @ApiOperation(value = "Add a new partner member to the proposal", nickname = "addPartner", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new Partner"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/partnermembers/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addPartner(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Partner member object to add on the proposal" ,required=true )  @Valid @RequestBody Employee member);


    @ApiOperation(value = "Add a new proposal to the system", nickname = "addProposal", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new proposal"),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 409, message = "Proposal already exists") })
    @RequestMapping(value = "/proposals",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addProposal(@ApiParam(value = "Proposal object to add to the system" ,required=true )  @Valid @RequestBody Proposal proposal);


    @ApiOperation(value = "Add a new review to the proposal", nickname = "addReview", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new review"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/reviews/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addReview(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Review object to add to the proposal" ,required=true )  @Valid @RequestBody Review review);


    @ApiOperation(value = "Add a new section to the proposal", nickname = "addSection", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new Section"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/sections/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addSection(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Section object to add to the proposal" ,required=true )  @Valid @RequestBody Section section);


    @ApiOperation(value = "Add a new staff member to the proposal", nickname = "addStaffMember", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Added a new staff member"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/proposals/{id}/staff/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void addStaffMember(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Staff member object to add on the proposal" ,required=true )  @Valid @RequestBody Employee staffMember);


    @ApiOperation(value = "Delete Bid with the ID provided", nickname = "deleteBid", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or bid not found") })
    @RequestMapping(value = "/proposals/{id}/bids/{bidid}",
        method = RequestMethod.DELETE)
    void deleteBid(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Bid ID",required=true) @PathVariable("bidid") Long bidid);


    @ApiOperation(value = "Delete comment with the ID provided", nickname = "deleteComment", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/comments/{commentid}",
        method = RequestMethod.DELETE)
    void deleteComment(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "comment ID",required=true) @PathVariable("commentid") Long commentid);


    @ApiOperation(value = "Delete partner with the ID provided", nickname = "deletePartner", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Company not found") })
    @RequestMapping(value = "/proposals/{id}/partnermembers/{partnerid}",
        method = RequestMethod.DELETE)
    void deletePartner(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Partner ID",required=true) @PathVariable("partnerid") Long partnerid);


    @ApiOperation(value = "Delete proposal with the ID provided", nickname = "deleteProposal", notes = "Deletes a single proposal", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Company not found") })
    @RequestMapping(value = "/proposals/{id}",
        method = RequestMethod.DELETE)
    void deleteProposal(@ApiParam(value = "ID of proposal to return",required=true) @PathVariable("id") Long id);



    @ApiOperation(value = "Delete review with the ID provided", nickname = "deleteReview", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/reviews/{reviewid}",
        method = RequestMethod.DELETE)
    void deleteReview(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "review ID",required=true) @PathVariable("reviewid") Long reviewid);


    @ApiOperation(value = "Delete section with the ID provided", nickname = "deleteSection", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/sections/{sectionid}",
        method = RequestMethod.DELETE)
    void deleteSection(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Section ID",required=true) @PathVariable("sectionid") Long sectionid);


    @ApiOperation(value = "Delete Staff with the ID provided", nickname = "deleteStaff", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or staff not found") })
    @RequestMapping(value = "/proposals/{id}/staff/{staffid}",
        method = RequestMethod.DELETE)
    void deleteStaff(@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id,@ApiParam(value = "Staff ID",required=true) @PathVariable("staffid") Long staffid);


    @ApiOperation(value = "Find all proposals by title", nickname = "findProposal", notes = "Retrieves all proposals with our without a filter on title", response = Proposal.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Proposal.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid title value") })
    @RequestMapping(value = "/proposals",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Proposal> findProposal(Pageable pageable,@ApiParam(value = "Title value to be considered for filter") @Valid @RequestParam(value = "title", required = false) String title);


    @ApiOperation(value = "Get all bids by the proposal ID", nickname = "getBids", notes = "Returns all bids", response = Bid.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Bid.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/bids",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Bid> getBids(Pageable pageable,@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find proposal by ID", nickname = "getProposal", notes = "Returns a single proposal", response = Proposal.class, tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Proposal.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Proposal getProposal(@ApiParam(value = "ID of proposal to return",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all comments by the proposal ID", nickname = "getProposalComments", notes = "Returns all comments", response = Comment.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/comments/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Comment> getProposalComments(Pageable pageable,@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all partner members by the proposal ID", nickname = "getProposalMembers", notes = "Returns all partner members", response = Employee.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Employee.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/partnermembers/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Employee> getProposalMembers(Pageable pageable,@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all reviews by the proposal ID", nickname = "getProposalReviews", notes = "Returns all reviews", response = Review.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Review.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/reviews/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Review> getProposalReviews(Pageable pageable,@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all sections by the proposal ID", nickname = "getProposalSections", notes = "Returns all sections", response = Section.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Section.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/sections/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Section> getProposalSections(Pageable pageable,@ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all staff members by the proposal ID", nickname = "getStaffMembers", notes = "Returns all staff members", response = Employee.class, responseContainer = "List", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Employee.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal not found") })
    @RequestMapping(value = "/proposals/{id}/staff/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Page<Employee> getStaffMembers(Pageable pageable, @ApiParam(value = "Proposal ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update reviews with ID provided", nickname = "reviewid", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or review not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/proposals/{id}/reviews/{reviewid}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    void reviewid(@ApiParam(value = "Review object that needs to be updated in the collection" ,required=true )  @Valid @RequestBody Review review,@ApiParam(value = "Review ID",required=true) @PathVariable("reviewid") Long reviewid,@ApiParam(value = "ID of proposal",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update bid with ID provided", nickname = "updateBid", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or bid not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/proposals/{id}/bids/{bidid}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    void updateBid(@ApiParam(value = "Bid object that needs to be updated in the collection" ,required=true )  @Valid @RequestBody Bid review,@ApiParam(value = "Bid ID",required=true) @PathVariable("bidid") Long bidid,@ApiParam(value = "ID of proposal",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update coments with ID provided", nickname = "updateComment", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or comment not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/proposals/{id}/comments/{commentid}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    void updateComment(@ApiParam(value = "Comment object that needs to be updated in the collection" ,required=true )  @Valid @RequestBody Comment section,@ApiParam(value = "Comment ID",required=true) @PathVariable("commentid") Long commentid,@ApiParam(value = "ID of proposal to return",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update sections with ID provided", nickname = "updateSection", notes = "", tags={ "proposals", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Proposal or section not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/proposals/{id}/sections/{sectionid}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    void updateSection(@ApiParam(value = "Section object that needs to be updated in the collection" ,required=true )  @Valid @RequestBody Section section,@ApiParam(value = "Section ID",required=true) @PathVariable("sectionid") Long sectionid,@ApiParam(value = "ID of proposal to return",required=true) @PathVariable("id") Long id);

}
