swagger: "2.0"
info:
  description: "Host and organise events with the help of partner companies"
  version: "1.0.0"
  title: "ECMA Management"
host: "ecma.marketing.com"
basePath: "/"
tags:
- name: "employees"
  description: "Know all about your partners employees"
- name: "companies"
  description: "Everything about your partners company"
- name: "proposals"
  description: "Know all about your partners proposals"
- name: "reviews"
  description: "" #
- name: "comments"
  description: "" #
- name: "sections"
  description: "" #

schemes:
- "https"
- "http"
paths:
  /companies:
    get:
      tags:
      - "companies"
      summary: "Get the list of all companies"
      description: ""
      operationId: "getCompanies"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter companies by name, description, or address" #
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Company"
    post:
      tags:
      - "companies"
      summary: "Add a new partner company to the collection"
      description: ""
      operationId: "addCompany"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        200:
          description: "Added a new company"
        405:
          description: "Invalid input"
        409:
          description: "Company already exists"

  /companies/{id}:
    get:
      tags:
      - "companies"
      summary: "Find company by ID"
      description: "Returns a single company"
      operationId: "getCompany"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Company"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"
    put:
      tags:
      - "companies"
      summary: "Update an existing company"
      description: ""
      operationId: "updateCompany"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found" 
        405:
          description: "Validation exception"
          
    delete:
      tags:
      - "companies"
      summary: "Delete company with the ID provided"
      description: ""
      operationId: "deleteCompany"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the company to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /employees:
    get:
      tags:
      - "employees"
      summary: "Get the list of all employees"
      description: ""
      operationId: "getEmployees"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address"
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"

  /employees/{id}:
    get:
      tags:
      - "employees"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "getEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
    put:
      tags:
      - "employees"
      summary: "Update employee with ID provided"
      description: ""
      operationId: "updateEmployee"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found" 
        405:
          description: "Validation exception"

    delete:
      tags:
      - "employees"
      summary: "Delete employee with the ID provided"
      description: "Deletes a single employee"
      operationId: "deleteEmployee"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /companies/{id}/employees:
    get:
      tags: 
      - "companies"
      summary: "Get the list of all employees of a company"
      description: ""
      operationId: "getEmployeesOfCompany"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address and companies by..."
        type: "string"
        required: false
      - in: "path"
        name: "id"
        description: "Company ID"
        required: true
        type: "integer"
        format: "int64"      
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
    post:
      tags:
      - "companies"
      summary: "Add a new employee to the collection"
      description: ""
      operationId: "addEmployee"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - in: "path"
        name: "id"
        description: "Company ID"
        required: true
        type: "integer"
        format: "int64" 
      responses:
        200:
          description: "Added a new Employee to the company"
        405:
          description: "Invalid input"
        409:
          description: "Employee already exists"

  /proposals:
    post:
      tags:
      - "proposals"
      summary: "Add a new proposal to the system"
      description: ""
      operationId: "addProposal"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "proposal"
        description: "Proposal object to add to the system"
        required: true
        schema:
          $ref: "#/definitions/Proposal"
      responses:
        200:
          description: "Added a new proposal"
        405:
          description: "Invalid input"
        409:
          description: "Proposal already exists"

    get:
      tags:
      - "proposals"
      summary: "Finds all proposals by title"
      description: "Retrieves all proposals with our without a filter on title"
      operationId: "findProposal"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Title value to be considered for filter"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Proposal"
        400:
          description: "Invalid title value"
  /proposals/{id}:

    get:
      tags:
      - "proposals"
      summary: "Find proposal by ID"
      description: "Returns a single proposal"
      operationId: "getProposal"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of proposal to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Proposal"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"

      #delete:
      #put:????
  /proposals/{id}/comments/:
    post:
      tags:
      - "comments"
      summary: "Add a new comment to the proposal"
      description: ""
      operationId: "addComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "comment"
        description: "Comment object to add to the proposal"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Added a new comment"
        405:
          description: "Invalid input"
    get:
      tags:
      - "comments"
      summary: "Get all comments by the proposal ID"
      description: "Returns all comments"
      operationId: "getProposalComments"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"
  /proposals/{id}/reviews/:
    post:
      tags:
      - "reviews"
      summary: "Add a new review to the proposal"
      description: ""
      operationId: "addReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "review"
        description: "Review object to add to the proposal"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Added a new review"
        405:
          description: "Invalid input"

    get:
      tags:
      - "reviews"
      summary: "Get all reviews by the proposal ID"
      description: "Returns all reviews" #rm description
      operationId: "getProposalReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"


  # /proposals/{id}/members/:
  #   post:
  #     tags:
  #     - "proposals"
  #     summary: "Add a new member to the proposal"
  #     description: ""
  #     operationId: "addMember"
  #     consumes:
  #     - "application/json"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "id"
  #       in: "path"
  #       description: "Proposal ID"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - in: "body"
  #       name: "member"
  #       description: "Member object to add on the proposal"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Employee"
  #     responses:
  #       200:
  #         description: "Added a new Employee"
  #       405:
  #         description: "Invalid input"
  #   get:
  #     tags:
  #     - "proposals"
  #     summary: "Get all members by the proposal ID"
  #     description: "Returns all members"
  #     operationId: "getProposalMembers"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "id"
  #       in: "path"
  #       description: "Proposal ID"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     responses:
  #       200:
  #         description: "Successful operation"
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/Employee"
  #       400:
  #         description: "Invalid ID supplied"
  #       404:
  #         description: "Proposal not found"
  /proposals/{id}/staff/:
    post:
      tags:
      - "proposals"
      summary: "Add a new staff member to the proposal"
      description: ""
      operationId: "addStaffMember"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "staffMember"
        description: "Staff member object to add on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Added a new staff member"
        405:
          description: "Invalid input"
      #get:
      #delete:


  # /proposals/{id}/authors/:
  #     get:
  #     post:
  #     delete:

  # /proposals/{id}/viewers/:
  #     get:
  #     post:
  #     delete:

  # /proposals/{id}/partners/:
  #     get:
  #     post:
  #     delete:

  # /proposals/{id}/sections/:
  #     get:
  #     post:


  # /reviews
  # get:
  # /reviews/{id}
  # get:
  # put:
  # delete:

  # /sections
  # get:
  # /sections/{id}
  # get:
  # put:
  # delete:

  # /comments
  # get: (comments of the all system)
  # /comments/{id}
  # get:
  # put:
  # delete:


definitions:
  Employee:
    type: "object"
    required:
    - "name"
    - "email"
    - "job"
    - "company"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      email:
        type: "string"
        format: "asdad@asdas"
      job:
        type: "string"
        format: "canalizador"
      company:
        type: "object"
        items:
          $ref: "#/definitions/Company"
  Company:
    type: "object"
    required:
    - "name"
    - "address"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      address:
        type: "string"
        format: "Long Street"
      email:
        type: "string"
        format: "info@acme.com"
      employees:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
  Proposal:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      sections:
        type: "array"
        items:
          $ref: "#/definitions/Section"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      approver:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      viewers:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      partners:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      staff:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      status:
        type: "string"
        description: "Proposal Status"
        enum:
        - "placed"
        - "approved"
        - "declined"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      author:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
#target
      comment:
        type: "string"
        format: "Adoro este tipo de eventos!"
  Review:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      reviewer:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      text:
        type: "string"
        format: "Que ideia brutal!"
      score:
        type: "integer"
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5

  Section:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
        format: "Churrasco"
      type:
        type: "string"
        format: "title"
