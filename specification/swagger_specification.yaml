


swagger: "2.0"
info:
  description: "Host and organise events with the help of partner companies"
  version: "1.0.0"
  title: "ECMA Management"
host: "ecma.marketing.com"
basePath: "/"
tags:
- name: "employees"
  description: "Know all about your partners employees"
- name: "company"
  description: "Everything about your partners company"
- name: "proposal"
  description: "Know all about your partners proposals"
  
schemes:
- "https"
- "http"
paths:
  /companies:
    get:
      tags:
      - "company"
      summary: "Get the list of all companies"
      description: ""
      operationId: "getCompanies"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter companies by name, description, or address" #
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Company"
    post:
      tags:
      - "company"
      summary: "Add a new partner company to the collection"
      description: ""
      operationId: "addCompany"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        405:
          description: "Invalid input"
        409:
          description: "Company already exists"

  /companies/{id}:
    get:
      tags:
      - "company"
      summary: "Find company by ID"
      description: "Returns a single company"
      operationId: "getCompany"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Company"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"
    put:
      tags:
      - "company"
      summary: "Update an existing company"
      description: ""
      operationId: "updateCompany"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found" 
        405:
          description: "Validation exception"
          
    delete:
      tags:
      - "company"
      summary: "Delete company with the ID provided"
      description: ""
      operationId: "deleteCompany"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the company to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /employees:
    get:
      tags:
      - "employees"
      summary: "Get the list of all employees"
      description: ""
      operationId: "getEmployees"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address"
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"

  /employees/{id}:
    get:
      tags:
      - "employees"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "getEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
    put:
      tags:
      - "employees"
      summary: "Update employee with ID provided"
      description: ""
      operationId: "updateEmployee"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found" 
        405:
          description: "Validation exception"

    delete:
      tags:
      - "employees"
      summary: "Delete employee with the ID provided"
      description: "Deletes a single employee"
      operationId: "deleteEmployee"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /companies/{id}/employees:
    get:
      tags: 
      - "company"
      summary: "Get the list of all employees of a company"
      description: ""
      operationId: "getEmployeesOfCompany"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address and companies by..."
        type: "string"
        required: false
      - in: "path"
        name: "id"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"      
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
    post:
      tags:
      - "company"
      summary: "Add a new employee to the collection"
      description: ""
      operationId: "addEmployee"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - in: "path"
        name: "id"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64" 
      responses:
        405:
          description: "Invalid input"
        409:
          description: "Employee already exists"
          
  /proposal:
    get:
      tags:
      - "proposal"
      summary: "Finds all proposals by title"
      description: "Retrieves all proposals with our without a filter on title"
      operationId: "findProposal"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Title value to be considered for filter"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Proposal"
        400:
          description: "Invalid title value"

definitions:
  Employee:
    type: "object"
    required:
    - "name"
    - "email"
    - "job"
    - "company"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      email:
        type: "string"
        format: "asdad@asdas"
      job:
        type: "string"
        format: "canalizador"
      company:
        type: "string"
        items:
          $ref: "#/definitions/Company"
  Company:
    type: "object"
    required:
    - "name"
    - "address"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      address:
        type: "string"
        format: "Long Street"
      email:
        type: "string"
        format: "info@acme.com"
      employees:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
  Proposal:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      status:
        type: "string"
        description: "Proposal Status"
        enum:
        - "placed"
        - "approved"
        - "declined"

