
#Falta delete da lista comments e reviews

swagger: "2.0"
info:
  description: "Host and organise events with the help of partner companies"
  version: "1.0.0"
  title: "ECMA Management"
host: "ecma.marketing.com"
basePath: "/"
tags:
- name: "employees"
  description: "Know all about your partners employees"
- name: "companies"
  description: "Know all about your partners"
- name: "proposals"
  description: "Know all about your partners proposals"
- name: "reviews"
  description: "Know all about the proposals reviews"
- name: "comments"
  description: "Know all about the proposals comments"
- name: "sections"
  description: "Know all about the proposals sections"

schemes:
- "https"
- "http"
paths:
  /companies:
    get:
      tags:
      - "companies"
      summary: "Get the list of all companies"
      description: ""
      operationId: "getCompanies"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter companies by name, description, or address" #
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Company"
    post:
      tags:
      - "companies"
      summary: "Add a new partner company to the collection"
      description: ""
      operationId: "addCompany"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        200:
          description: "Added a new company"
        405:
          description: "Invalid input"
        409:
          description: "Company already exists"

  /companies/{id}:
    get:
      tags:
      - "companies"
      summary: "Find company by ID"
      description: ""
      operationId: "getCompany"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Company"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"
    put:
      tags:
      - "companies"
      summary: "Update an existing company"
      description: ""
      operationId: "updateCompany"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "company"
        description: "Company object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Company"
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found" 
        405:
          description: "Validation exception"
          
    delete:
      tags:
      - "companies"
      summary: "Delete company with the ID provided"
      description: ""
      operationId: "deleteCompany"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the company to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /employees:
    get:
      tags:
      - "employees"
      summary: "Get the list of all employees"
      description: ""
      operationId: "getEmployees"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address"
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"

  /employees/{id}:
    get:
      tags:
      - "employees"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "getEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
    put:
      tags:
      - "employees"
      summary: "Update employee with ID provided"
      description: ""
      operationId: "updateEmployee"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - name: "id"
        in: "path"
        description: "ID of emoloyee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found" 
        405:
          description: "Validation exception"


  /employees/{id}/mentions:
    get:
      tags: 
      - "employees"
      summary: "Get the list of all mentions of a employee"
      description: ""
      operationId: "getMentionsOfEmployee"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter mentions by the author"
        type: "string"
        required: false
      - in: "path"
        name: "id"
        description: "Employee ID"
        required: true
        type: "integer"
        format: "int64"      
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mentions"

    delete:
      tags:
      - "employees"
      summary: "Delete employee with the ID provided"
      description: ""
      operationId: "deleteEmployee"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /companies/{id}/employees:
    get:
      tags: 
      - "companies"
      summary: "Get the list of all employees of a company"
      description: ""
      operationId: "getEmployeesOfCompany"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter employees by name, email, job, company or address and companies by..."
        type: "string"
        required: false
      - in: "path"
        name: "id"
        description: "Company ID"
        required: true
        type: "integer"
        format: "int64"      
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
    post:
      tags:
      - "companies"
      summary: "Add a new employee to the collection"
      description: ""
      operationId: "addEmployee"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "employee"
        description: "Employee object that needs to be added to the collection"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      - in: "path"
        name: "id"
        description: "Company ID"
        required: true
        type: "integer"
        format: "int64" 
      responses:
        200:
          description: "Added a new Employee to the company"
        405:
          description: "Invalid input"
        409:
          description: "Employee already exists"

  /proposals:
    post:
      tags:
      - "proposals"
      summary: "Add a new proposal to the system"
      description: ""
      operationId: "addProposal"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "proposal"
        description: "Proposal object to add to the system"
        required: true
        schema:
          $ref: "#/definitions/Proposal"
      responses:
        200:
          description: "Added a new proposal"
        405:
          description: "Invalid input"
        409:
          description: "Proposal already exists"

    get:
      tags:
      - "proposals"
      summary: "Find all proposals by title"
      description: "Retrieves all proposals with our without a filter on title"
      operationId: "findProposal"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Title value to be considered for filter"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Proposal"
        400:
          description: "Invalid title value"
  /proposals/{id}:
    get:
      tags:
      - "proposals"
      summary: "Find proposal by ID"
      description: "Returns a single proposal"
      operationId: "getProposal"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of proposal to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Proposal"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"


    delete:
      tags:
      - "proposals"
      summary: "Delete proposal with the ID provided"
      description: "Deletes a single proposal"
      operationId: "deleteProposal"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of proposal to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"
      #put:????
  /proposals/{id}/comments/:
    post:
      tags:
      - "proposals"
      summary: "Add a new comment to the proposal"
      description: ""
      operationId: "addComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "comment"
        description: "Comment object to add to the proposal"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Added a new comment"
        405:
          description: "Invalid input"
    get:
      tags:
      - "proposals"
      summary: "Get all comments by the proposal ID"
      description: "Returns all comments"
      operationId: "getProposalComments"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"
  /proposals/{id}/reviews/:
    post:
      tags:
      - "proposals"
      summary: "Add a new review to the proposal"
      description: ""
      operationId: "addReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "review"
        description: "Review object to add to the proposal"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Added a new review"
        405:
          description: "Invalid input"

    get:
      tags:
      - "proposals"
      summary: "Get all reviews by the proposal ID"
      description: "Returns all reviews" 
      operationId: "getProposalReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"


  /proposals/{id}/partners/:
    post:
      tags:
      - "proposals"
      summary: "Add a new partner member to the proposal"
      description: ""
      operationId: "addPartner"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "member"
        description: "Partner member object to add on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Added a new Partner"
        405:
          description: "Invalid input"
    get:
      tags:
      - "proposals"
      summary: "Get all partner members by the proposal ID"
      description: "Returns all partner members"
      operationId: "getProposalMembers"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"


  /proposals/{id}/partners/{partnerid}:
    delete:
      tags:
      - "proposals"
      summary: "Delete partner with the ID provided"
      description: ""
      operationId: "deletePartner"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "partnerid"
        in: "path"
        description: "Partner ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"


  /proposals/{id}/staff/:
    post:
      tags:
      - "proposals"
      summary: "Add a new staff member to the proposal"
      description: ""
      operationId: "addStaffMember"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "staffMember"
        description: "Staff member object to add on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Added a new staff member"
        405:
          description: "Invalid input"
    get:
      tags:
      - "proposals"
      summary: "Get all staff members by the proposal ID"
      description: "Returns all staff members"
      operationId: "getStaffMembers"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"


  /proposals/{id}/staff/{staffid}:
    delete:
      tags:
      - "proposals"
      summary: "Delete Staff with the ID provided"
      description: ""
      operationId: "deleteStaff"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "staffid"
        in: "path"
        description: "Staff ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal or staff not found"


  /proposals/{id}/authors/:
    get:
      tags:
      - "proposals"
      summary: "Get all authors by the proposal ID"
      description: "Returns all authors"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"
    post:
      tags:
      - "proposals"
      summary: "Add a new author to the proposal"
      description: ""
      operationId: "addAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "Author"
        description: "Author object to add on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Added a new Author"
        405:
          description: "Invalid input"


  /proposals/{id}/authors/{authorid}:
    delete:
      tags:
      - "proposals"
      summary: "Delete Author with the ID provided"
      description: ""
      operationId: "deleteAuthor"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "authorid"
        in: "path"
        description: "Author ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal or author not found"


  /proposals/{id}/viewers/:
    get:
      tags:
      - "proposals"
      summary: "Get all viewers by the proposal ID"
      description: "Returns all viewers"
      operationId: "getViewers"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"
    post:
      tags:
      - "proposals"
      summary: "Add a new viewer to the proposal"
      description: ""
      operationId: "addViewer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "Viewer"
        description: "Viewer object to add on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Added a new Viewer"
        405:
          description: "Invalid input"


  /proposals/{id}/viewers/{viewerid}:
    delete:
      tags:
      - "proposals"
      summary: "Delete viewer with the ID provided"
      description: ""
      operationId: "deleteViewer"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "viewerid"
        in: "path"
        description: "viewer ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal or viewer not found"


  /proposals/{id}/sections:
    get:
      tags:
      - "proposals"
      summary: "Get all the sections belonging to the proposal with the provided ID"
      description: "Returns all sections"
      operationId: "getSections"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Section"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Proposal not found"

    post:
      tags:
      - "proposals"
      summary: "Add a new section to the proposal"
      description: ""
      operationId: "addSection"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Proposal ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "Section"
        description: "Section object to be added on the proposal"
        required: true
        schema:
          $ref: "#/definitions/Section"
      responses:
        200:
          description: "Added a new Section"
        405:
          description: "Invalid input"


  /sections:
    get:
      tags:
      - "sections"
      summary: "Get the list of all sections"
      description: "Returns all the sections"
      operationId: "getAllSections"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter sections by type"
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Section"


  /sections/{id}:
    get:
      tags:
      - "sections"
      summary: "Find section by ID"
      description: "Returns a single section"
      operationId: "getSection"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of section to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Section"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Section not found"
    put:
      tags:
      - "sections"
      summary: "Update the section with the provided ID"
      description: ""
      operationId: "updateSection"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "section"
        description: "Section object that will be updated"
        required: true
        schema:
          $ref: "#/definitions/Section"
      - name: "id"
        in: "path"
        description: "ID of Section to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Section not found" 
        405:
          description: "Validation exception"
    delete:
      tags:
      - "sections"
      summary: "Delete the section with the provided ID"
      description: ""
      operationId: "deleteSection"
      parameters:
      - name: "id"
        in: "path"
        description: "Section ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Section not found"

  /reviews/:
    get:
      tags:
      - "reviews"
      summary: "Get the list of all reviews"
      description: ""
      operationId: "getReviews"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter reviews by author, description, ..." #
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"

  /reviews/{id}:
    delete:
      tags:
      - "reviews"
      summary: "Delete review with the ID provided"
      description: ""
      operationId: "deleteReview"
      parameters:
      - name: "id"
        in: "path"
        description: "Review ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Review not found"
    get:
      tags:
      - "reviews"
      summary: "Find review by ID"
      description: "Returns a single review"
      operationId: "getReview"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of review to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Review not found"
    put:
      tags:
      - "reviews"
      summary: "Update review with ID provided"
      description: ""
      operationId: "updateReview"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "review"
        description: "Review object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Review"
      - name: "id"
        in: "path"
        description: "ID of Review to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Review not found" 
        405:
          description: "Validation exception"

  /comments/:
    get:
      tags:
      - "comments"
      summary: "Get the list of all comments"
      description: ""
      operationId: "getComments"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "search"
        description: "Filter reviews by id, description, author" #
        type: "string"
        required: false
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"

  /comments/{id}:
    delete:
      tags:
      - "comments"
      summary: "Delete comment with the ID provided"
      description: ""
      operationId: "deleteComment"
      parameters:
      - name: "id"
        in: "path"
        description: "Comment ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Comment not found"
    get:
      tags:
      - "comments"
      summary: "Find comment by ID"
      description: "Returns a single comment"
      operationId: "getComment"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Comment not found"
    put:
      tags:
      - "comments"
      summary: "Update comment with ID provided"
      description: ""
      operationId: "updateComment"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "cooment"
        description: "Comment object that needs to be updated in the collection"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      - name: "id"
        in: "path"
        description: "ID of comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Comment not found" 
        405:
          description: "Validation exception"


definitions:
  Employee:
    type: "object"
    required:
    - "name"
    - "email"
    - "job"
    - "company"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      email:
        type: "string"
        format: "asdad@asdas"
      job:
        type: "string"
        format: "canalizador"
      company:
        type: "object"
        items:
          $ref: "#/definitions/Company"

      myProposals:
        type: "object"
        items:
           $ref: "#/definitions/Proposal"
      viewedProposals:
        type: "object"
        items:
           $ref: "#/definitions/Proposal"
      staffProposals:
        type: "object"
        items:
           $ref: "#/definitions/Proposal"
      partnerProposals:
        type: "object"
        items:
           $ref: "#/definitions/Proposal"
      proposals:
        type: "object"
        items:
           $ref: "#/definitions/Proposal"
  Company:
    type: "object"
    required:
    - "name"
    - "address"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "ecma"
      address:
        type: "string"
        format: "Long Street"
      email:
        type: "string"
        format: "info@acme.com"
      employees:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
  Proposal:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      approver:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      status:
        type: "string"
        description: "Proposal Status"
        enum:
        - "placed"
        - "approved"
        - "declined"

      sections:
        type: "array"
        items:
          $ref: "#/definitions/Section"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"

      authors:
        type: "array"
        items:
          $ref: "#/definitions/Employee"      
      viewers:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      partners:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      staff:
        type: "array"
        items:
          $ref: "#/definitions/Employee"
      
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      author:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      mentions:
        type: "array"
        items:
          $ref: "#/definitions/Mentions"
      comment:
        type: "string"
        format: "Adoro este tipo de eventos!"
  Mentions:
    type: "object"
    required:
    - "author"
    - "target"
    properties:
      author:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      target:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
  Review:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      reviewer:
        type: "object"
        items:
          $ref: "#/definitions/Employee"
      text:
        type: "string"
        format: "Que ideia brutal!"
      score:
        type: "integer"
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5
  Section:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
        format: "WebSummit FCT"
      type:
        type: "string"
        format: "title"
